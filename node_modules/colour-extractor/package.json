{
  "name": "colour-extractor",
  "description": "Extract colour palettes from images",
  "version": "0.2.1",
  "homepage": "http://github.com/josip/node-colour-extractor",
  "repository": {
    "type": "git",
    "url": "git://github.com/josip/node-colour-extractor.git"
  },
  "author": {
    "name": "Josip Lisec",
    "email": "josip@jlx.cc",
    "url": "http://jlx.cc"
  },
  "main": "lib/colour-extractor.js",
  "directories": {
    "lib": "lib"
  },
  "engines": {
    "node": ">=0.4"
  },
  "dependencies": {
    "gm": ">=0.4.0",
    "temp": ">=0.4.x"
  },
  "readme": "[![build status](https://secure.travis-ci.org/josip/node-colour-extractor.png)](http://travis-ci.org/josip/node-colour-extractor)\n# colour-extractor\n\nExtract colour palettes from photos using Node.js.\n\n## Installation\n\nIs as simple as with any other Node.js module:\n\n    $ npm install colour-extractor\n\nNOTE: `colour-extractor` depends on [gm](http://aheckmann.github.com/gm/) module, which in turn depends on [GraphicsMagick](http://www.graphicsmagick.org).\n\n## Sample\n![sample](http://i.imgur.com/8aWnu5W.png)\n\n## Usage\n\n`colour-extractor` exports two functions:\n\n    ce = require('colour-extractor')\n    ce.topColours('Photos/Cats/01.jpg', true, function (colours) {\n      console.log(colours);\n    });\n\n`topColours` function takes three arguments:\n\n  * path to your photo,\n  * `true` if you'd like the resulting array to be sorted by frequency,\n    `false` if you'd like to get colours sorted as they appear in the photo (top-to-bottom),\n  * a callback function.\n\nCallback function will be passed an `Array` with RGB triplet of each colour and its frequency:\n\n    [\n      [1,   [46, 70, 118]],\n      [0.3, [0,   0,   2]],\n      [0.2, [12,  44,  11]]\n    ]\n\nThe second function, `colourKey`, returns an array with nine colours, where each one can be mapped to a 3x3 box, ie. super-pixelised representation of the photo.\n\n    ce.colourKey('Photos/Cats/999999.jpg', function (colours) {\n      database.store('colour-keys', photoId, colours);\n      res.send(colours);\n      // render colours to user while they wait for the photo to load.\n      // (or something equally brilliant)\n    });\n\n\n### Utilities\n\n`colour-extractor` exports two more utility functions:\n\n    > ce.rgb2hex(100, 10, 12);\n    '#640a0c'\n    > ce.rgb2hex([44, 44, 44]);\n    '#2c2c2c'\n    > ce.hex2rgb('#ffffff');\n    [255, 255, 255]\n    > ce.hex2rgb('45c092')\n    [69, 192, 146]\n\n## How does it work?\n\nThat's what I'd like to know as well! Anyhow, `colour-extractor` parses GraphicMagick's histogram, tries to detect similar colours and remove ones which appear less frequently than others.\n\nIf you happen to know an actual algorithm that deals with this sort of stuff, don't hesitate to contact me!\n\n## License\n\ncolour-extractor is published under MMIT license, please see the LICENSE file for full details.\n\nPhotos used in the sample can be downloaded from Flickr:\n\n  * [Title?](http://www.flickr.com/photos/chavals/2941676828)\n  * [nel profondo del blu](http://www.flickr.com/photos/shamballah/2038749488)\n  * [Reykjav√≠k revisited](http://www.flickr.com/photos/giesenbauer/4951425521)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/josip/node-colour-extractor/issues"
  },
  "_id": "colour-extractor@0.2.1",
  "dist": {
    "shasum": "a48e17a06297ba3b344847506d45b0157f913dd8"
  },
  "_from": "colour-extractor@",
  "_resolved": "https://registry.npmjs.org/colour-extractor/-/colour-extractor-0.2.1.tgz"
}
